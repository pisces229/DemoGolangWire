// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

// Injectors from wire.go:

func InitializeSetProvideFirstService() *FirstService {
	firstRepository := NewFirstRepository()
	firstLogic := NewFirstLogic(firstRepository)
	firstService := NewFirstService(firstLogic)
	return firstService
}

func InitializeSetProvideBindService() *Service {
	repository := NewRepository()
	logic := NewLogic(repository)
	service := NewService(logic)
	return service
}

func InitializeSetProvideStructSummary() *Summary {
	first := ProvideFirst()
	second := ProvideSecond()
	summary := &Summary{
		First:  first,
		Second: second,
	}
	return summary
}

func InitializeSetValueStructFirst() *First {
	name := _wireNameValue
	age := _wireAgeValue
	message := _wireMessageValue
	first := &First{
		name:    name,
		age:     age,
		message: message,
	}
	return first
}

var (
	_wireNameValue    = Name("ValueNameFirst")
	_wireAgeValue     = Age(1)
	_wireMessageValue = Message("ValueMessageFirst")
)

func InitializeSetValueStructSecond() *Second {
	name := _wireMainNameValue
	age := _wireMainAgeValue
	message := _wireMainMessageValue
	second := &Second{
		name:    name,
		age:     age,
		message: message,
	}
	return second
}

var (
	_wireMainNameValue    = Name("ValueNameSecond")
	_wireMainAgeValue     = Age(2)
	_wireMainMessageValue = Message("ValueMessageSecond")
)

func InitializeSetValueStructSummary() *Summary {
	name := _wireNameValue2
	age := _wireAgeValue2
	message := _wireMessageValue2
	first := First{
		name:    name,
		age:     age,
		message: message,
	}
	second := Second{
		name:    name,
		age:     age,
		message: message,
	}
	summary := &Summary{
		First:  first,
		Second: second,
	}
	return summary
}

var (
	_wireNameValue2    = Name("ValueNameSummary")
	_wireAgeValue2     = Age(3)
	_wireMessageValue2 = Message("ValueMessageSummary")
)

func InitializeUser(name Name, age Age, message Message) *User {
	user := NewUser(name, age, message)
	return user
}

func InitializeDatabaseWithError(connectionString ConnectionString) (*Database, error) {
	database, err := NewDatabaseWithError(connectionString)
	if err != nil {
		return nil, err
	}
	return database, nil
}

func InitializeDatabaseWithErrorAndCleanup(connectionString ConnectionString) (*Database, func(), error) {
	database, cleanup, err := NewDatabaseWithErrorAndCleanup(connectionString)
	if err != nil {
		return nil, nil, err
	}
	return database, func() {
		cleanup()
	}, nil
}
